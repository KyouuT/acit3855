services: 
  zookeeper:
    container_name: zookeeper 
    image: wurstmeister/zookeeper 
    hostname: zookeeper
    expose:
      - "2181"
    networks:
      - service 

  kafka: 
    container_name: kafka
    image: wurstmeister/kafka 
    command: [start-kafka.sh] 
    expose: 
      - "29092" 
    hostname: kafka 
    environment: 
      KAFKA_CREATE_TOPICS: "events:1:1" 
      KAFKA_ADVERTISED_HOST_NAME: localhost  
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092 
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE 
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092 
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT 
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 
    volumes: 
      - ./data/kafka:/kafka
      - ./script:/app/script
    entrypoint: ["/bin/bash", "-c", "chmod +x /app/script/reset-kafka.sh && /app/script/reset-kafka.sh"]
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "kafka:29092"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s
    depends_on: 
      - "zookeeper"
    networks:
      - service

  db:
    container_name: db-mysql 
    image: mysql 
    environment: 
      MYSQL_RANDOM_ROOT_PASSWORD: 1 
      MYSQL_USER: juan
      MYSQL_PASSWORD: Jt211313! 
      MYSQL_DATABASE: Aquarium
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5 
    expose: 
      - "3306"
    volumes:
      - ./data/db:/var/lib/mysql
    networks:
      - service

  receiver:
    container_name: receiver
    build:
      context: Receiver
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8080:8080"
    volumes:
      - ./config/test:/app/config/test
      - ./logs:/logs
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - service
  
  storage:
    container_name: storage
    build:
      context: Storage
      dockerfile: Dockerfile
    restart: always  
    expose:
      - "8090"
    volumes:
      - ./config/prod:/app/config/prod
      - ./config/test:/app/config/test
      - ./logs:/logs
    depends_on:
      db:
        condition: service_healthy
    networks:
      - service

  processing:
    container_name: processing
    build:
      context: Processing
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8100:8100"
    volumes:
      - ./config/test:/app/config/test
      - ./logs:/logs
      - ./data/processing:/app/data/processing
    depends_on:
      - db
    networks:
      - service
    
  analyzer:
    container_name: analyzer
    build:
      context: Analyzer
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8110:8110"
    volumes:
      - ./config/prod:/app/config/prod
      - ./config/test:/app/config/test
      - ./logs:/logs
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - service

  dashboard-ui:
    container_name: dashboard-ui
    build:
      context: dashboard-ui
      dockerfile: Dockerfile
    ports:
      - "8200:80"
    volumes:
      - ./dashboard-ui/:/usr/share/nginx/html
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - service

volumes:
  my-db:

networks:
  service:
    driver: bridge